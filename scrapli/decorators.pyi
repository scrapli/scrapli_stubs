from scrapli.channel import Channel as Channel
from scrapli.driver import AsyncGenericDriver as AsyncGenericDriver, GenericDriver as GenericDriver
from scrapli.exceptions import ScrapliTimeout as ScrapliTimeout
from scrapli.transport.base.base_transport import BaseTransport as BaseTransport
from typing import Any, Callable

_IS_WINDOWS: Any

class TransportTimeout:
    message: Any = ...
    transport_instance: Any
    transport_timeout_transport: float = ...
    def __init__(self, message: str=...) -> None: ...
    def __call__(self, wrapped_func: Callable[..., Any]) -> Callable[..., Any]: ...
    def _get_timeout_transport(self) -> float: ...
    def _handle_timeout(self) -> None: ...
    def _multiprocessing_timeout(self, wrapped_func: Callable[..., Any], args: Any, kwargs: Any) -> Any: ...
    def _signal_raise_exception(self, signum: Any, frame: Any) -> None: ...

class ChannelTimeout:
    message: Any = ...
    channel_timeout_ops: float = ...
    channel_logger: Any
    transport_instance: Any
    def __init__(self, message: str=...) -> None: ...
    def __call__(self, wrapped_func: Callable[..., Any]) -> Callable[..., Any]: ...
    def _handle_timeout(self) -> None: ...
    def _multiprocessing_timeout(self, wrapped_func: Callable[..., Any], args: Any, kwargs: Any) -> Any: ...
    def _signal_raise_exception(self, signum: Any, frame: Any) -> None: ...

class TimeoutOpsModifier:
    def __call__(self, wrapped_func: Callable[..., Any]) -> Callable[..., Any]: ...
