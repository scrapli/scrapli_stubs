from scrapli.channel import AsyncChannel as AsyncChannel, Channel as Channel
from scrapli.exceptions import ConnectionNotOpened as ConnectionNotOpened, ScrapliTimeout as ScrapliTimeout
from scrapli.transport import Transport as Transport
from typing import Any, Callable

WIN: Any

class OperationTimeout:
    attribute: Any = ...
    message: Any = ...
    scrapli_obj: Any
    session_lock: Any
    close: Any
    transport: Any
    timeout_duration: Any
    timeout_exit: bool = ...
    system_transport: bool = ...
    _use_signals: bool = ...
    def __init__(self, attribute: str, message: str=...) -> None: ...
    def __call__(self, wrapped_func: Callable[..., Any]) -> Callable[..., Any]: ...
    def set_scrapli_obj_attrs(self) -> None: ...
    def _handle_timeout(self) -> None: ...
    def _signal_raise_exception(self, signum: Any, frame: Any) -> None: ...
    async def asyncio_timeout(self, wrapped_func: Callable[..., Any], args: Any, kwargs: Any) -> Any: ...
    def signal_timeout(self, wrapped_func: Callable[..., Any], args: Any, kwargs: Any) -> Any: ...
    def multiprocessing_timeout(self, wrapped_func: Callable[..., Any], args: Any, kwargs: Any) -> Any: ...

def requires_open_session() -> Callable[..., Any]: ...
