from io import BytesIO
from scrapli.driver import AsyncGenericDriver as AsyncGenericDriver, AsyncNetworkDriver as AsyncNetworkDriver, GenericDriver as GenericDriver, NetworkDriver as NetworkDriver
from scrapli.driver.core import AsyncEOSDriver as AsyncEOSDriver, AsyncIOSXEDriver as AsyncIOSXEDriver, AsyncIOSXRDriver as AsyncIOSXRDriver, AsyncJunosDriver as AsyncJunosDriver, AsyncNXOSDriver as AsyncNXOSDriver, EOSDriver as EOSDriver, IOSXEDriver as IOSXEDriver, IOSXRDriver as IOSXRDriver, JunosDriver as JunosDriver, NXOSDriver as NXOSDriver
from scrapli.driver.network.base_driver import PrivilegeLevel as PrivilegeLevel
from scrapli.exceptions import ScrapliException as ScrapliException, ScrapliModuleNotFound as ScrapliModuleNotFound, ScrapliTypeError as ScrapliTypeError, ScrapliValueError as ScrapliValueError
from scrapli.helper import format_user_warning as format_user_warning
from scrapli.logging import logger as logger
from scrapli.transport import ASYNCIO_TRANSPORTS as ASYNCIO_TRANSPORTS
from typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union

def _build_provided_kwargs_dict(host: str, privilege_levels: Optional[Dict[str, PrivilegeLevel]], default_desired_privilege_level: str, port: int, auth_username: str, auth_password: str, auth_private_key: str, auth_private_key_passphrase: str, auth_strict_key: Optional[bool], auth_bypass: Optional[bool], timeout_socket: float, timeout_transport: float, timeout_ops: float, comms_return_char: str, comms_ansi: Optional[bool], ssh_config_file: Optional[Union[str, bool]], ssh_known_hosts_file: Optional[Union[str, bool]], on_init: Optional[Callable[..., Any]], on_open: Optional[Callable[..., Any]], on_close: Optional[Callable[..., Any]], transport: str, transport_options: Optional[Dict[str, Any]], channel_log: Optional[Union[str, bool, BytesIO]], channel_lock: Optional[bool], logging_uid: str, auth_secondary: str, failed_when_contains: Optional[List[str]], textfsm_platform: str, genie_platform: str, **kwargs: Dict[Any, Any]) -> Dict[str, Any]: ...
def _get_community_platform_details(community_platform_name: str) -> Dict[str, Any]: ...
def _get_driver_kwargs(platform_details: Dict[str, Any], variant: Optional[str], _async: bool=...) -> Dict[str, Any]: ...

class Scrapli(NetworkDriver):
    CORE_PLATFORM_MAP: Any = ...
    DRIVER_MAP: Any = ...
    @classmethod
    def _get_driver_class(cls: Any, platform_details: Dict[str, Any], variant: Optional[str]) -> Union[Type[NetworkDriver], Type[GenericDriver]]: ...
    @classmethod
    def _get_community_driver(cls: Any, community_platform_name: str, variant: Optional[str]) -> Tuple[Union[Type[NetworkDriver], Type[GenericDriver]], Dict[str, Any]]: ...
    @classmethod
    def _get_driver(cls: Any, platform: str, variant: Optional[str]) -> Tuple[Union[Type[NetworkDriver], Type[GenericDriver]], Dict[str, Any]]: ...
    def __new__(cls: Any, platform: str, host: str, privilege_levels: Optional[Dict[str, PrivilegeLevel]]=..., default_desired_privilege_level: str=..., port: int=..., auth_username: str=..., auth_password: str=..., auth_private_key: str=..., auth_private_key_passphrase: str=..., auth_strict_key: Optional[bool]=..., auth_bypass: Optional[bool]=..., timeout_socket: float=..., timeout_transport: float=..., timeout_ops: float=..., comms_return_char: str=..., comms_ansi: Optional[bool]=..., ssh_config_file: Optional[Union[str, bool]]=..., ssh_known_hosts_file: Optional[Union[str, bool]]=..., on_init: Optional[Callable[..., Any]]=..., on_open: Optional[Callable[..., Any]]=..., on_close: Optional[Callable[..., Any]]=..., transport: str=..., transport_options: Optional[Dict[str, Any]]=..., channel_log: Optional[Union[str, bool, BytesIO]]=..., channel_lock: Optional[bool]=..., logging_uid: str=..., auth_secondary: str=..., failed_when_contains: Optional[List[str]]=..., textfsm_platform: str=..., genie_platform: str=..., variant: Optional[str]=..., **kwargs: Dict[Any, Any]) -> Scrapli: ...

class AsyncScrapli(AsyncNetworkDriver):
    CORE_PLATFORM_MAP: Any = ...
    DRIVER_MAP: Any = ...
    @classmethod
    def _get_driver_class(cls: Any, platform_details: Dict[str, Any], variant: Optional[str]) -> Union[Type[AsyncNetworkDriver], Type[AsyncGenericDriver]]: ...
    @classmethod
    def _get_community_driver(cls: Any, community_platform_name: str, variant: Optional[str]) -> Tuple[Union[Type[AsyncNetworkDriver], Type[AsyncGenericDriver]], Dict[str, Any]]: ...
    @classmethod
    def _get_driver(cls: Any, platform: str, variant: Optional[str]) -> Tuple[Union[Type[AsyncNetworkDriver], Type[AsyncGenericDriver]], Dict[str, Any]]: ...
    def __new__(cls: Any, platform: str, host: str, privilege_levels: Optional[Dict[str, PrivilegeLevel]]=..., default_desired_privilege_level: str=..., port: int=..., auth_username: str=..., auth_password: str=..., auth_private_key: str=..., auth_private_key_passphrase: str=..., auth_strict_key: Optional[bool]=..., auth_bypass: Optional[bool]=..., timeout_socket: float=..., timeout_transport: float=..., timeout_ops: float=..., comms_return_char: str=..., comms_ansi: Optional[bool]=..., ssh_config_file: Optional[Union[str, bool]]=..., ssh_known_hosts_file: Optional[Union[str, bool]]=..., on_init: Optional[Callable[..., Any]]=..., on_open: Optional[Callable[..., Any]]=..., on_close: Optional[Callable[..., Any]]=..., transport: str=..., transport_options: Optional[Dict[str, Any]]=..., channel_log: Optional[Union[str, bool, BytesIO]]=..., channel_lock: Optional[bool]=..., logging_uid: str=..., auth_secondary: str=..., failed_when_contains: Optional[List[str]]=..., textfsm_platform: str=..., genie_platform: str=..., variant: Optional[str]=..., **kwargs: Dict[Any, Any]) -> AsyncScrapli: ...
