from asyncssh.connection import SSHClientConnection as SSHClientConnection
from asyncssh.stream import SSHReader as SSHReader, SSHWriter as SSHWriter
from scrapli.decorators import TransportTimeout as TransportTimeout
from scrapli.exceptions import ScrapliAuthenticationFailed as ScrapliAuthenticationFailed, ScrapliConnectionError as ScrapliConnectionError, ScrapliConnectionNotOpened as ScrapliConnectionNotOpened
from scrapli.ssh_config import SSHKnownHosts as SSHKnownHosts
from scrapli.transport.base import AsyncTransport as AsyncTransport, BasePluginTransportArgs as BasePluginTransportArgs, BaseTransportArgs as BaseTransportArgs
from typing import Any

class PluginTransportArgs(BasePluginTransportArgs):
    auth_username: str
    auth_password: str = ...
    auth_private_key: str = ...
    auth_strict_key: bool = ...
    ssh_config_file: str = ...
    ssh_known_hosts_file: str = ...
    def __init__(self, auth_username: Any, auth_password: Any, auth_private_key: Any, auth_strict_key: Any, ssh_config_file: Any, ssh_known_hosts_file: Any) -> None: ...

class AsyncsshTransport(AsyncTransport):
    plugin_transport_args: Any = ...
    session: Any = ...
    stdout: Any = ...
    stdin: Any = ...
    def __init__(self, base_transport_args: BaseTransportArgs, plugin_transport_args: PluginTransportArgs) -> None: ...
    def _verify_key(self) -> None: ...
    def _verify_key_value(self) -> None: ...
    async def open(self) -> None: ...
    def close(self) -> None: ...
    def isalive(self) -> bool: ...
    async def read(self) -> bytes: ...
    def write(self, channel_input: bytes) -> None: ...
