import abc
from abc import ABC, abstractmethod
from typing import Any, Optional

class TransportBase(ABC, metaclass=abc.ABCMeta):
    logger: Any = ...
    host: Any = ...
    port: Any = ...
    timeout_socket: Any = ...
    timeout_transport: Any = ...
    timeout_exit: Any = ...
    keepalive: Any = ...
    keepalive_interval: Any = ...
    keepalive_type: Any = ...
    keepalive_pattern: Any = ...
    session_lock: Any = ...
    def __init__(self, host: str=..., port: int=..., timeout_socket: int=..., timeout_transport: int=..., timeout_exit: bool=..., keepalive: bool=..., keepalive_interval: int=..., keepalive_type: str=..., keepalive_pattern: str=...) -> None: ...
    def __bool__(self) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    @abstractmethod
    def close(self) -> None: ...
    @abstractmethod
    def isalive(self) -> bool: ...
    @abstractmethod
    def set_timeout(self, timeout: Optional[int]=...) -> None: ...
