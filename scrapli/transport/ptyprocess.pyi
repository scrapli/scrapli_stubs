from typing import Any, Optional, Type, TypeVar

class PtyProcessError(Exception): ...
PtyProcessType = TypeVar('PtyProcessType', bound='PtyProcess')

def _byte(i: Any): ...

_EOF: Any
_INTR: Any

def _make_eof_intr() -> None: ...
def _setecho(fd: Any, state: Any) -> None: ...
def _setwinsize(fd: Any, rows: Any, cols: Any) -> None: ...

class PtyProcess:
    string_type: Any = ...
    linesep: Any = ...
    crlf: Any = ...
    @staticmethod
    def write_to_stdout(b: Any): ...
    encoding: Any = ...
    argv: Any = ...
    env: Any = ...
    launch_dir: Any = ...
    pid: Any = ...
    fd: Any = ...
    fileobj: Any = ...
    terminated: bool = ...
    closed: bool = ...
    exitstatus: Any = ...
    signalstatus: Any = ...
    status: Any = ...
    flag_eof: bool = ...
    delayafterclose: float = ...
    delayafterterminate: float = ...
    def __init__(self, pid: Any, fd: Any) -> None: ...
    @classmethod
    def spawn(cls: Type[PtyProcessType], argv: Any, cwd: Any=..., env: Any=..., echo: Any=..., preexec_fn: Any=..., dimensions: Any=..., pass_fds: Any=...) -> PtyProcessType: ...
    def __repr__(self): ...
    @staticmethod
    def _coerce_send_string(s: Any): ...
    @staticmethod
    def _coerce_read_string(s: Any): ...
    def __del__(self) -> None: ...
    def fileno(self): ...
    def close(self, force: bool = ...) -> None: ...
    def flush(self) -> None: ...
    def isatty(self): ...
    def waitnoecho(self, timeout: Optional[Any] = ...): ...
    echo: Any = ...
    def getecho(self): ...
    def setecho(self, state: Any) -> None: ...
    def read(self, size: Any=...) -> bytes: ...
    def readline(self): ...
    def _writeb(self, b: Any, flush: bool = ...): ...
    def write(self, s: Any, flush: Any=...) -> int: ...
    def sendcontrol(self, char: Any): ...
    def sendeof(self): ...
    def sendintr(self): ...
    def eof(self) -> bool: ...
    def terminate(self, force: bool = ...): ...
    def wait(self): ...
    def isalive(self) -> bool: ...
    def kill(self, sig: Any) -> None: ...
    def setwinsize(self, rows: Any, cols: Any): ...
