import abc
from abc import ABC, abstractmethod
from scrapli.exceptions import ScrapliKeepaliveFailure as ScrapliKeepaliveFailure
from typing import Any, Optional

LOG: Any

class Transport(ABC, metaclass=abc.ABCMeta):
    host: Any = ...
    port: Any = ...
    timeout_socket: Any = ...
    timeout_transport: Any = ...
    timeout_exit: Any = ...
    keepalive: Any = ...
    keepalive_interval: Any = ...
    keepalive_type: Any = ...
    keepalive_pattern: Any = ...
    session_lock: Any = ...
    def __init__(self, host: str=..., port: int=..., timeout_socket: int=..., timeout_transport: int=..., timeout_exit: bool=..., keepalive: bool=..., keepalive_interval: int=..., keepalive_type: str=..., keepalive_pattern: str=...) -> None: ...
    def __bool__(self) -> bool: ...
    @abstractmethod
    def open(self) -> None: ...
    @abstractmethod
    def close(self) -> None: ...
    @abstractmethod
    def isalive(self) -> bool: ...
    @abstractmethod
    def read(self) -> bytes: ...
    @abstractmethod
    def write(self, channel_input: str) -> None: ...
    @abstractmethod
    def set_timeout(self, timeout: Optional[int]=...) -> None: ...
    def _session_keepalive(self) -> None: ...
    def _keepalive_network(self) -> None: ...
