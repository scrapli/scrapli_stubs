from scrapli.decorators import OperationTimeout as OperationTimeout, requires_open_session as requires_open_session
from scrapli.exceptions import ConnectionNotOpened as ConnectionNotOpened, ScrapliAuthenticationFailed as ScrapliAuthenticationFailed, ScrapliTimeout as ScrapliTimeout
from scrapli.helper import get_prompt_pattern as get_prompt_pattern, strip_ansi as strip_ansi
from scrapli.transport.async_transport import AsyncTransport as AsyncTransport
from typing import Any

ASYNC_TELNET_TRANSPORT_ARGS: Any
IAC: Any
DONT: Any
DO: Any
WONT: Any
WILL: Any

class AsyncTelnetTransport(AsyncTransport):
    auth_username: Any = ...
    auth_password: Any = ...
    auth_bypass: Any = ...
    _timeout_ops: Any = ...
    _timeout_ops_auth: Any = ...
    _comms_prompt_pattern: Any = ...
    _comms_return_char: Any = ...
    _comms_ansi: Any = ...
    username_prompt: str = ...
    password_prompt: str = ...
    stdout: Any
    stdin: Any
    _stdout_binary_transmission: bool = ...
    lib_auth_exception: Any = ...
    _isauthenticated: bool = ...
    def __init__(self, host: str, port: int=..., auth_username: str=..., auth_password: str=..., auth_bypass: bool=..., timeout_socket: int=..., timeout_transport: int=..., timeout_ops: int=..., timeout_exit: bool=..., comms_prompt_pattern: str=..., comms_return_char: str=..., comms_ansi: bool=...) -> None: ...
    async def _open(self) -> bytes: ...
    async def _handle_control_chars(self) -> bytes: ...
    async def open(self) -> None: ...
    async def _authenticate(self, output: bytes=...) -> None: ...
    async def _telnet_isauthenticated(self) -> bool: ...
    def close(self) -> None: ...
    def isalive(self) -> bool: ...
    async def read(self) -> bytes: ...
    def write(self, channel_input: str) -> None: ...
    timeout_transport: Any = ...
    def set_timeout(self, timeout: int) -> None: ...
