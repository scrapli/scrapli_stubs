from scrapli.channel.base_channel import BaseChannel as BaseChannel, BaseChannelArgs as BaseChannelArgs
from scrapli.decorators import ChannelTimeout as ChannelTimeout
from scrapli.exceptions import ScrapliAuthenticationFailed as ScrapliAuthenticationFailed, ScrapliTimeout as ScrapliTimeout
from scrapli.transport.base import Transport as Transport
from typing import Any, Iterator, List, Optional, Tuple

class Channel(BaseChannel):
    transport: Any
    channel_lock: Any = ...
    def __init__(self, transport: Transport, base_channel_args: BaseChannelArgs) -> None: ...
    def _channel_lock(self) -> Iterator[None]: ...
    def read(self) -> bytes: ...
    def _read_until_input(self, channel_input: bytes) -> bytes: ...
    def _read_until_prompt(self, buf: bytes=..., prompt: str=...) -> bytes: ...
    def _read_until_prompt_or_time(self, buf: bytes=..., channel_outputs: Optional[List[bytes]]=..., read_duration: Optional[float]=...) -> bytes: ...
    def channel_authenticate_ssh(self, auth_password: str, auth_private_key_passphrase: str) -> None: ...
    def channel_authenticate_telnet(self, auth_username: str=..., auth_password: str=...) -> None: ...
    def get_prompt(self) -> str: ...
    def send_input(self, channel_input: str, *, strip_prompt: bool=..., eager: bool=...) -> Tuple[bytes, bytes]: ...
    def send_input_and_read(self, channel_input: str, *, strip_prompt: bool=..., expected_outputs: Optional[List[str]]=..., read_duration: Optional[float]=...) -> Tuple[bytes, bytes]: ...
    def send_inputs_interact(self, interact_events: List[Tuple[str, str, Optional[bool]]]) -> Tuple[bytes, bytes]: ...
