from io import BytesIO
from scrapli.exceptions import ScrapliAuthenticationFailed as ScrapliAuthenticationFailed, ScrapliTypeError as ScrapliTypeError
from scrapli.logging import get_instance_logger as get_instance_logger
from scrapli.transport.base import AsyncTransport as AsyncTransport, Transport as Transport
from typing import Any, List, Optional, Pattern, Tuple, Union

class BaseChannelArgs:
    comms_prompt_pattern: str = ...
    comms_return_char: str = ...
    comms_ansi: bool = ...
    timeout_ops: float = ...
    channel_log: Union[str, bool, BytesIO] = ...
    channel_lock: bool = ...
    def __init__(self, comms_prompt_pattern: Any, comms_return_char: Any, comms_ansi: Any, timeout_ops: Any, channel_log: Any, channel_lock: Any) -> None: ...

class BaseChannel:
    transport: Any = ...
    _base_channel_args: Any = ...
    logger: Any = ...
    channel_log: Any = ...
    def __init__(self, transport: Union[AsyncTransport, Transport], base_channel_args: BaseChannelArgs) -> None: ...
    def write(self, channel_input: str, redacted: bool=...) -> None: ...
    def send_return(self) -> None: ...
    @staticmethod
    def _join_and_compile(channel_outputs: Optional[List[bytes]]) -> Pattern[bytes]: ...
    def _ssh_message_handler(self, output: bytes) -> None: ...
    @staticmethod
    def _get_prompt_pattern(class_pattern: str, pattern: Optional[str]=...) -> Pattern[bytes]: ...
    def _process_output(self, buf: bytes, strip_prompt: bool) -> bytes: ...
    @staticmethod
    def _strip_ansi(buf: bytes) -> bytes: ...
    @staticmethod
    def _pre_send_input(channel_input: str) -> None: ...
    @staticmethod
    def _pre_send_inputs_interact(interact_events: List[Tuple[str, str, Optional[bool]]]) -> None: ...
