from scrapli.channel.base_channel import BaseChannel as BaseChannel, BaseChannelArgs as BaseChannelArgs
from scrapli.decorators import ChannelTimeout as ChannelTimeout
from scrapli.exceptions import ScrapliAuthenticationFailed as ScrapliAuthenticationFailed, ScrapliTimeout as ScrapliTimeout
from scrapli.transport.base import AsyncTransport as AsyncTransport
from typing import Any, AsyncIterator, List, Optional, Tuple

class AsyncChannel(BaseChannel):
    transport: Any
    channel_lock: Any = ...
    def __init__(self, transport: AsyncTransport, base_channel_args: BaseChannelArgs) -> None: ...
    async def _channel_lock(self) -> AsyncIterator[None]: ...
    async def read(self) -> bytes: ...
    async def _read_until_input(self, channel_input: bytes) -> bytes: ...
    async def _read_until_prompt(self, buf: bytes=..., prompt: str=...) -> bytes: ...
    async def _read_until_prompt_or_time(self, buf: bytes=..., channel_outputs: Optional[List[bytes]]=..., read_duration: Optional[float]=...) -> bytes: ...
    async def channel_authenticate_ssh(self, auth_password: str, auth_private_key_passphrase: str) -> None: ...
    async def channel_authenticate_telnet(self, auth_username: str=..., auth_password: str=...) -> None: ...
    async def get_prompt(self) -> str: ...
    async def send_input(self, channel_input: str, *, strip_prompt: bool=..., eager: bool=...) -> Tuple[bytes, bytes]: ...
    async def send_input_and_read(self, channel_input: str, *, strip_prompt: bool=..., expected_outputs: Optional[List[str]]=..., read_duration: Optional[float]=...) -> Tuple[bytes, bytes]: ...
    async def send_inputs_interact(self, interact_events: List[Tuple[str, str, Optional[bool]]]) -> Tuple[bytes, bytes]: ...
