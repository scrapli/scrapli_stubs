from logging import FileHandler, Formatter, LogRecord, LoggerAdapter
from scrapli.exceptions import ScrapliException as ScrapliException
from typing import Any, Optional, Union

class ScrapliLogRecord(LogRecord):
    message_id: int
    uid: str
    host: str
    port: str
    target: str

class ScrapliFormatter(Formatter):
    log_header: Any = ...
    caller_info: Any = ...
    message_id: int = ...
    header_record: Any = ...
    def __init__(self, log_header: bool=..., caller_info: bool=...) -> None: ...
    def formatMessage(self, record: LogRecord) -> str: ...

class ScrapliFileHandler(FileHandler):
    _record_buf: Any = ...
    _record_msg_buf: bytes = ...
    _read_msg_prefix: str = ...
    _read_msg_prefix_len: Any = ...
    def __init__(self, filename: str, mode: str=..., encoding: Optional[str]=..., delay: bool=...) -> None: ...
    def emit_buffered(self) -> None: ...
    def emit(self, record: LogRecord) -> None: ...

def get_instance_logger(instance_name: str, host: str=..., port: int=..., uid: str=...) -> LoggerAdapter: ...
def enable_basic_logging(file: Union[str, bool]=..., level: str=..., caller_info: bool=..., buffer_log: bool=...) -> None: ...

logger: Any
