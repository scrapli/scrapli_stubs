import abc
from abc import ABC, abstractmethod
from collections import namedtuple
from scrapli.driver.generic_driver import GenericDriver as GenericDriver
from scrapli.exceptions import CouldNotAcquirePrivLevel as CouldNotAcquirePrivLevel, UnknownPrivLevel as UnknownPrivLevel
from scrapli.helper import get_prompt_pattern as get_prompt_pattern
from scrapli.response import Response as Response
from typing import Any, Dict, List, Optional, Tuple, Union

PrivilegeLevel = namedtuple('PrivilegeLevel', 'pattern name deescalate_priv deescalate escalate_priv escalate escalate_auth escalate_prompt requestable level')
NoPrivLevel: Any
PRIVS: Dict[str, PrivilegeLevel]
LOG: Any

class NetworkDriver(GenericDriver, ABC, metaclass=abc.ABCMeta):
    auth_secondary: Any = ...
    privs: Any = ...
    default_desired_priv: str = ...
    textfsm_platform: str = ...
    genie_platform: str = ...
    failed_when_contains: Any = ...
    @abstractmethod
    def __init__(self, auth_secondary: str=..., **kwargs: Any) -> None: ...
    def acquire_priv(self, desired_priv: str) -> None: ...
    def send_command(self, command: str, strip_prompt: bool=..., failed_when_contains: Optional[Union[str, List[str]]]=...) -> Response: ...
    def send_commands(self, commands: List[str], strip_prompt: bool=..., failed_when_contains: Optional[Union[str, List[str]]]=...) -> List[Response]: ...
    def send_interactive(self, interact_events: List[Tuple[str, str, Optional[bool]]], failed_when_contains: Optional[Union[str, List[str]]]=...) -> Response: ...
    def send_configs(self, configs: Union[str, List[str]], strip_prompt: bool=..., failed_when_contains: Optional[Union[str, List[str]]]=...) -> List[Response]: ...
