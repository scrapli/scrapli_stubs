from io import BytesIO
from scrapli.channel.base_channel import BaseChannelArgs as BaseChannelArgs
from scrapli.exceptions import ScrapliTransportPluginError as ScrapliTransportPluginError, ScrapliTypeError as ScrapliTypeError, ScrapliValueError as ScrapliValueError
from scrapli.helper import format_user_warning as format_user_warning, resolve_file as resolve_file
from scrapli.logging import get_instance_logger as get_instance_logger
from scrapli.ssh_config import SSHConfig as SSHConfig
from scrapli.transport import CORE_TRANSPORTS as CORE_TRANSPORTS
from scrapli.transport.base import BasePluginTransportArgs as BasePluginTransportArgs, BaseTransportArgs as BaseTransportArgs
from types import ModuleType
from typing import Any, Callable, Dict, Optional, Tuple, Type, Union

class BaseDriver:
    logger: Any = ...
    _base_channel_args: Any = ...
    _base_transport_args: Any = ...
    auth_username: Any = ...
    auth_password: Any = ...
    auth_private_key_passphrase: Any = ...
    transport_name: Any = ...
    transport: Any = ...
    def __init__(self, host: str, port: int=..., auth_username: str=..., auth_password: str=..., auth_private_key: str=..., auth_private_key_passphrase: str=..., auth_strict_key: bool=..., auth_bypass: bool=..., timeout_socket: float=..., timeout_transport: float=..., timeout_ops: float=..., comms_prompt_pattern: str=..., comms_return_char: str=..., comms_ansi: bool=..., ssh_config_file: Union[str, bool]=..., ssh_known_hosts_file: Union[str, bool]=..., on_init: Optional[Callable[..., Any]]=..., on_open: Optional[Callable[..., Any]]=..., on_close: Optional[Callable[..., Any]]=..., transport: str=..., transport_options: Optional[Dict[str, Any]]=..., channel_log: Union[str, bool, BytesIO]=..., channel_lock: bool=..., logging_uid: str=...) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def _setup_host(host: str, port: int) -> Tuple[str, int]: ...
    @staticmethod
    def _setup_auth(auth_private_key: str, auth_strict_key: bool, auth_bypass: bool) -> Tuple[str, bool, bool]: ...
    def _setup_ssh_file_args(self, transport: str, ssh_config_file: Union[str, bool], ssh_known_hosts_file: Union[str, bool]) -> Tuple[str, str]: ...
    port: Any = ...
    auth_private_key: Any = ...
    def _update_ssh_args_from_ssh_config(self) -> None: ...
    on_init: Any = ...
    on_open: Any = ...
    on_close: Any = ...
    def _setup_callables(self, on_init: Optional[Callable[..., Any]], on_open: Optional[Callable[..., Any]], on_close: Optional[Callable[..., Any]]) -> None: ...
    def _transport_factory(self) -> Tuple[Callable[..., Any], object]: ...
    def _load_transport_plugin_common(self, transport_plugin_module: ModuleType) -> Tuple[Any, Type[BasePluginTransportArgs]]: ...
    def _load_core_transport_plugin(self) -> Tuple[Any, Type[BasePluginTransportArgs]]: ...
    def _load_non_core_transport_plugin(self) -> Tuple[Any, Type[BasePluginTransportArgs]]: ...
    def _resolve_ssh_config(self, ssh_config_file: str) -> str: ...
    def _resolve_ssh_known_hosts(self, ssh_known_hosts: str) -> str: ...
    @property
    def comms_prompt_pattern(self) -> str: ...
    @comms_prompt_pattern.setter
    def comms_prompt_pattern(self, value: str) -> None: ...
    @property
    def comms_return_char(self) -> str: ...
    @comms_return_char.setter
    def comms_return_char(self, value: str) -> None: ...
    @property
    def comms_ansi(self) -> bool: ...
    @comms_ansi.setter
    def comms_ansi(self, value: bool) -> None: ...
    @property
    def timeout_socket(self) -> float: ...
    @timeout_socket.setter
    def timeout_socket(self, value: float) -> None: ...
    @property
    def timeout_transport(self) -> float: ...
    @timeout_transport.setter
    def timeout_transport(self, value: float) -> None: ...
    @property
    def timeout_ops(self) -> float: ...
    @timeout_ops.setter
    def timeout_ops(self, value: float) -> None: ...
    def isalive(self) -> bool: ...
    def _pre_open_closing_log(self, closing: bool=...) -> None: ...
    def _post_open_closing_log(self, closing: bool=...) -> None: ...
